openapi: 3.0.3
info:
  title: Shop
  version: 1.0.0
tags:
- name: "user"
  description: "customer of the shop"
- name: "item"
  description: "goods in the store"
- name: "order"
  description: "customer's orders"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: Создает новый объект типа User
      operationId: CreateUser
      requestBody:
        description: Структура объекта User, которую следует передать в теле запроса
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User' 
        required: true
      responses:
        405:
          description: Invalid input 
          content: {}
      x-codegen-request-body-name: body
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: Получить объект User по ID
      operationId: GetUser
      parameters:
      - name: userId
        in: path
        description: ID искомого User
        required: true
        schema:
          type: integer
          format: int64 
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Передан невалидный ID
          content: {}
        404:
          description: User не найден
          content: {}
  /user/login:
    post:
      tags:
      - "user"
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      tags:
      - "user"
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    post:
      tags:
      - "item"
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      requestBody:
        description: "Item object that needs to be added to the store"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item' 
        required: true
      responses:
        405:
          description: "Invalid input"
      security:
      - api_key: []
    get:
      tags:
      - "item"
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
  /items/upload_image:
    post:
      tags:
      - "item"
      summary: "uploads an image"
      operationId: "uploadFile"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: successful uploaded
          content: {}
      security:
      - api_key: []
  /items/{itemId}:
    get:
      tags:
      - "item"
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      tags:
      - "item"
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - "item"
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
      - api_key: []
  /order:
    post:
      tags:
      - "order"
      summary: "Add a new order to the store"
      operationId: "CreateOrder"
      requestBody:
        description: "Order object that needs to be added to the store"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order' 
        required: true
      responses:
        405:
          description: "Invalid input"
          content: {}
    get:
      tags:
      - "order"
      summary: Lists Orders with filters
      operationId: ListOrders
      parameters:
      - name: date_min
        in: query
        description: Lower date limit
        required: false
        schema:
          type: string
          format: date-time
      - name: date_max
        in: query
        description: Upper date limit
        required: false
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          description: Invalid date range
          content: {}
      security:
      - api_key: []
  /order/{orderId}:
    get:
      tags:
      - "order"
      summary: Find order by ID
      operationId: GetOrder
      parameters:
      - name: orderId
        in: path
        description: ID of order to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Not found
          content: {}
      security:
      - api_key: []
    put:
      tags:
      - "order"
      summary: Updates an order in the store
      operationId: UpdateOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order' 
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer # чтобы не потерять точность, денежные поля мы будем передавать
          format: int64 # в виде целочисленного значения минимальной размерности валюты (например, центы или копейки)
        image_link:
          type: string
    OrderItem: # пришлось дополнительно ввести этот объект с полем quantity, иначе на фронтенде невозможно будет отрисовать заказ
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
        quantity:
          type: integer
          format: int32
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        items: # получаем на фронтенде не id'шники товаров, а именно объекты OrderItem, тогда их возможно будет отрисовать
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        comment:
          type: string
        createDate:
          type: "string"
          format: "date-time"
        shipDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          description: "Order Status"
          enum:
          - "placed"
          - "approved"
          - "canceled"
          - "paid"
          - "delivered"
        complete:
          type: "boolean"
          default: false
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header